/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package spotify.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class spotify extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6829439570602881984L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"spotify\",\"namespace\":\"spotify.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"track_name\",\"type\":\"string\"},{\"name\":\"disc_number\",\"type\":\"int\"},{\"name\":\"duration\",\"type\":\"int\"},{\"name\":\"explicit\",\"type\":\"int\"},{\"name\":\"audio_feature_id\",\"type\":\"string\"},{\"name\":\"preview_url\",\"type\":\"string\"},{\"name\":\"track_number\",\"type\":\"int\"},{\"name\":\"popularity\",\"type\":\"int\"},{\"name\":\"is_playable\",\"type\":[\"int\",\"null\"]},{\"name\":\"acousticness\",\"type\":\"float\"},{\"name\":\"danceability\",\"type\":\"float\"},{\"name\":\"energy\",\"type\":\"float\"},{\"name\":\"instrumentalness\",\"type\":\"float\"},{\"name\":\"key\",\"type\":\"int\"},{\"name\":\"liveness\",\"type\":\"float\"},{\"name\":\"loudness\",\"type\":\"float\"},{\"name\":\"mode\",\"type\":\"int\"},{\"name\":\"speechiness\",\"type\":\"float\"},{\"name\":\"tempo\",\"type\":\"float\"},{\"name\":\"time_signature\",\"type\":\"int\"},{\"name\":\"valence\",\"type\":\"float\"},{\"name\":\"album_name\",\"type\":\"string\"},{\"name\":\"album_group\",\"type\":\"string\"},{\"name\":\"album_type\",\"type\":\"string\"},{\"name\":\"release_date\",\"type\":\"string\"},{\"name\":\"album_popularity\",\"type\":\"int\"},{\"name\":\"artist_name\",\"type\":\"string\"},{\"name\":\"artist_popularity\",\"type\":\"int\"},{\"name\":\"followers\",\"type\":\"int\"},{\"name\":\"genre_id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<spotify> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<spotify> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<spotify> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<spotify> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<spotify> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this spotify to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a spotify from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a spotify instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static spotify fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence track_name;
  private int disc_number;
  private int duration;
  private int explicit;
  private java.lang.CharSequence audio_feature_id;
  private java.lang.CharSequence preview_url;
  private int track_number;
  private int popularity;
  private java.lang.Integer is_playable;
  private float acousticness;
  private float danceability;
  private float energy;
  private float instrumentalness;
  private int key;
  private float liveness;
  private float loudness;
  private int mode;
  private float speechiness;
  private float tempo;
  private int time_signature;
  private float valence;
  private java.lang.CharSequence album_name;
  private java.lang.CharSequence album_group;
  private java.lang.CharSequence album_type;
  private java.lang.CharSequence release_date;
  private int album_popularity;
  private java.lang.CharSequence artist_name;
  private int artist_popularity;
  private int followers;
  private java.lang.CharSequence genre_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public spotify() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param track_name The new value for track_name
   * @param disc_number The new value for disc_number
   * @param duration The new value for duration
   * @param explicit The new value for explicit
   * @param audio_feature_id The new value for audio_feature_id
   * @param preview_url The new value for preview_url
   * @param track_number The new value for track_number
   * @param popularity The new value for popularity
   * @param is_playable The new value for is_playable
   * @param acousticness The new value for acousticness
   * @param danceability The new value for danceability
   * @param energy The new value for energy
   * @param instrumentalness The new value for instrumentalness
   * @param key The new value for key
   * @param liveness The new value for liveness
   * @param loudness The new value for loudness
   * @param mode The new value for mode
   * @param speechiness The new value for speechiness
   * @param tempo The new value for tempo
   * @param time_signature The new value for time_signature
   * @param valence The new value for valence
   * @param album_name The new value for album_name
   * @param album_group The new value for album_group
   * @param album_type The new value for album_type
   * @param release_date The new value for release_date
   * @param album_popularity The new value for album_popularity
   * @param artist_name The new value for artist_name
   * @param artist_popularity The new value for artist_popularity
   * @param followers The new value for followers
   * @param genre_id The new value for genre_id
   */
  public spotify(java.lang.CharSequence id, java.lang.CharSequence track_name, java.lang.Integer disc_number, java.lang.Integer duration, java.lang.Integer explicit, java.lang.CharSequence audio_feature_id, java.lang.CharSequence preview_url, java.lang.Integer track_number, java.lang.Integer popularity, java.lang.Integer is_playable, java.lang.Float acousticness, java.lang.Float danceability, java.lang.Float energy, java.lang.Float instrumentalness, java.lang.Integer key, java.lang.Float liveness, java.lang.Float loudness, java.lang.Integer mode, java.lang.Float speechiness, java.lang.Float tempo, java.lang.Integer time_signature, java.lang.Float valence, java.lang.CharSequence album_name, java.lang.CharSequence album_group, java.lang.CharSequence album_type, java.lang.CharSequence release_date, java.lang.Integer album_popularity, java.lang.CharSequence artist_name, java.lang.Integer artist_popularity, java.lang.Integer followers, java.lang.CharSequence genre_id) {
    this.id = id;
    this.track_name = track_name;
    this.disc_number = disc_number;
    this.duration = duration;
    this.explicit = explicit;
    this.audio_feature_id = audio_feature_id;
    this.preview_url = preview_url;
    this.track_number = track_number;
    this.popularity = popularity;
    this.is_playable = is_playable;
    this.acousticness = acousticness;
    this.danceability = danceability;
    this.energy = energy;
    this.instrumentalness = instrumentalness;
    this.key = key;
    this.liveness = liveness;
    this.loudness = loudness;
    this.mode = mode;
    this.speechiness = speechiness;
    this.tempo = tempo;
    this.time_signature = time_signature;
    this.valence = valence;
    this.album_name = album_name;
    this.album_group = album_group;
    this.album_type = album_type;
    this.release_date = release_date;
    this.album_popularity = album_popularity;
    this.artist_name = artist_name;
    this.artist_popularity = artist_popularity;
    this.followers = followers;
    this.genre_id = genre_id;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return track_name;
    case 2: return disc_number;
    case 3: return duration;
    case 4: return explicit;
    case 5: return audio_feature_id;
    case 6: return preview_url;
    case 7: return track_number;
    case 8: return popularity;
    case 9: return is_playable;
    case 10: return acousticness;
    case 11: return danceability;
    case 12: return energy;
    case 13: return instrumentalness;
    case 14: return key;
    case 15: return liveness;
    case 16: return loudness;
    case 17: return mode;
    case 18: return speechiness;
    case 19: return tempo;
    case 20: return time_signature;
    case 21: return valence;
    case 22: return album_name;
    case 23: return album_group;
    case 24: return album_type;
    case 25: return release_date;
    case 26: return album_popularity;
    case 27: return artist_name;
    case 28: return artist_popularity;
    case 29: return followers;
    case 30: return genre_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: track_name = (java.lang.CharSequence)value$; break;
    case 2: disc_number = (java.lang.Integer)value$; break;
    case 3: duration = (java.lang.Integer)value$; break;
    case 4: explicit = (java.lang.Integer)value$; break;
    case 5: audio_feature_id = (java.lang.CharSequence)value$; break;
    case 6: preview_url = (java.lang.CharSequence)value$; break;
    case 7: track_number = (java.lang.Integer)value$; break;
    case 8: popularity = (java.lang.Integer)value$; break;
    case 9: is_playable = (java.lang.Integer)value$; break;
    case 10: acousticness = (java.lang.Float)value$; break;
    case 11: danceability = (java.lang.Float)value$; break;
    case 12: energy = (java.lang.Float)value$; break;
    case 13: instrumentalness = (java.lang.Float)value$; break;
    case 14: key = (java.lang.Integer)value$; break;
    case 15: liveness = (java.lang.Float)value$; break;
    case 16: loudness = (java.lang.Float)value$; break;
    case 17: mode = (java.lang.Integer)value$; break;
    case 18: speechiness = (java.lang.Float)value$; break;
    case 19: tempo = (java.lang.Float)value$; break;
    case 20: time_signature = (java.lang.Integer)value$; break;
    case 21: valence = (java.lang.Float)value$; break;
    case 22: album_name = (java.lang.CharSequence)value$; break;
    case 23: album_group = (java.lang.CharSequence)value$; break;
    case 24: album_type = (java.lang.CharSequence)value$; break;
    case 25: release_date = (java.lang.CharSequence)value$; break;
    case 26: album_popularity = (java.lang.Integer)value$; break;
    case 27: artist_name = (java.lang.CharSequence)value$; break;
    case 28: artist_popularity = (java.lang.Integer)value$; break;
    case 29: followers = (java.lang.Integer)value$; break;
    case 30: genre_id = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'track_name' field.
   * @return The value of the 'track_name' field.
   */
  public java.lang.CharSequence getTrackName() {
    return track_name;
  }


  /**
   * Sets the value of the 'track_name' field.
   * @param value the value to set.
   */
  public void setTrackName(java.lang.CharSequence value) {
    this.track_name = value;
  }

  /**
   * Gets the value of the 'disc_number' field.
   * @return The value of the 'disc_number' field.
   */
  public int getDiscNumber() {
    return disc_number;
  }


  /**
   * Sets the value of the 'disc_number' field.
   * @param value the value to set.
   */
  public void setDiscNumber(int value) {
    this.disc_number = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public int getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(int value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'explicit' field.
   * @return The value of the 'explicit' field.
   */
  public int getExplicit() {
    return explicit;
  }


  /**
   * Sets the value of the 'explicit' field.
   * @param value the value to set.
   */
  public void setExplicit(int value) {
    this.explicit = value;
  }

  /**
   * Gets the value of the 'audio_feature_id' field.
   * @return The value of the 'audio_feature_id' field.
   */
  public java.lang.CharSequence getAudioFeatureId() {
    return audio_feature_id;
  }


  /**
   * Sets the value of the 'audio_feature_id' field.
   * @param value the value to set.
   */
  public void setAudioFeatureId(java.lang.CharSequence value) {
    this.audio_feature_id = value;
  }

  /**
   * Gets the value of the 'preview_url' field.
   * @return The value of the 'preview_url' field.
   */
  public java.lang.CharSequence getPreviewUrl() {
    return preview_url;
  }


  /**
   * Sets the value of the 'preview_url' field.
   * @param value the value to set.
   */
  public void setPreviewUrl(java.lang.CharSequence value) {
    this.preview_url = value;
  }

  /**
   * Gets the value of the 'track_number' field.
   * @return The value of the 'track_number' field.
   */
  public int getTrackNumber() {
    return track_number;
  }


  /**
   * Sets the value of the 'track_number' field.
   * @param value the value to set.
   */
  public void setTrackNumber(int value) {
    this.track_number = value;
  }

  /**
   * Gets the value of the 'popularity' field.
   * @return The value of the 'popularity' field.
   */
  public int getPopularity() {
    return popularity;
  }


  /**
   * Sets the value of the 'popularity' field.
   * @param value the value to set.
   */
  public void setPopularity(int value) {
    this.popularity = value;
  }

  /**
   * Gets the value of the 'is_playable' field.
   * @return The value of the 'is_playable' field.
   */
  public java.lang.Integer getIsPlayable() {
    return is_playable;
  }


  /**
   * Sets the value of the 'is_playable' field.
   * @param value the value to set.
   */
  public void setIsPlayable(java.lang.Integer value) {
    this.is_playable = value;
  }

  /**
   * Gets the value of the 'acousticness' field.
   * @return The value of the 'acousticness' field.
   */
  public float getAcousticness() {
    return acousticness;
  }


  /**
   * Sets the value of the 'acousticness' field.
   * @param value the value to set.
   */
  public void setAcousticness(float value) {
    this.acousticness = value;
  }

  /**
   * Gets the value of the 'danceability' field.
   * @return The value of the 'danceability' field.
   */
  public float getDanceability() {
    return danceability;
  }


  /**
   * Sets the value of the 'danceability' field.
   * @param value the value to set.
   */
  public void setDanceability(float value) {
    this.danceability = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return The value of the 'energy' field.
   */
  public float getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * @param value the value to set.
   */
  public void setEnergy(float value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'instrumentalness' field.
   * @return The value of the 'instrumentalness' field.
   */
  public float getInstrumentalness() {
    return instrumentalness;
  }


  /**
   * Sets the value of the 'instrumentalness' field.
   * @param value the value to set.
   */
  public void setInstrumentalness(float value) {
    this.instrumentalness = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public int getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(int value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'liveness' field.
   * @return The value of the 'liveness' field.
   */
  public float getLiveness() {
    return liveness;
  }


  /**
   * Sets the value of the 'liveness' field.
   * @param value the value to set.
   */
  public void setLiveness(float value) {
    this.liveness = value;
  }

  /**
   * Gets the value of the 'loudness' field.
   * @return The value of the 'loudness' field.
   */
  public float getLoudness() {
    return loudness;
  }


  /**
   * Sets the value of the 'loudness' field.
   * @param value the value to set.
   */
  public void setLoudness(float value) {
    this.loudness = value;
  }

  /**
   * Gets the value of the 'mode' field.
   * @return The value of the 'mode' field.
   */
  public int getMode() {
    return mode;
  }


  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(int value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'speechiness' field.
   * @return The value of the 'speechiness' field.
   */
  public float getSpeechiness() {
    return speechiness;
  }


  /**
   * Sets the value of the 'speechiness' field.
   * @param value the value to set.
   */
  public void setSpeechiness(float value) {
    this.speechiness = value;
  }

  /**
   * Gets the value of the 'tempo' field.
   * @return The value of the 'tempo' field.
   */
  public float getTempo() {
    return tempo;
  }


  /**
   * Sets the value of the 'tempo' field.
   * @param value the value to set.
   */
  public void setTempo(float value) {
    this.tempo = value;
  }

  /**
   * Gets the value of the 'time_signature' field.
   * @return The value of the 'time_signature' field.
   */
  public int getTimeSignature() {
    return time_signature;
  }


  /**
   * Sets the value of the 'time_signature' field.
   * @param value the value to set.
   */
  public void setTimeSignature(int value) {
    this.time_signature = value;
  }

  /**
   * Gets the value of the 'valence' field.
   * @return The value of the 'valence' field.
   */
  public float getValence() {
    return valence;
  }


  /**
   * Sets the value of the 'valence' field.
   * @param value the value to set.
   */
  public void setValence(float value) {
    this.valence = value;
  }

  /**
   * Gets the value of the 'album_name' field.
   * @return The value of the 'album_name' field.
   */
  public java.lang.CharSequence getAlbumName() {
    return album_name;
  }


  /**
   * Sets the value of the 'album_name' field.
   * @param value the value to set.
   */
  public void setAlbumName(java.lang.CharSequence value) {
    this.album_name = value;
  }

  /**
   * Gets the value of the 'album_group' field.
   * @return The value of the 'album_group' field.
   */
  public java.lang.CharSequence getAlbumGroup() {
    return album_group;
  }


  /**
   * Sets the value of the 'album_group' field.
   * @param value the value to set.
   */
  public void setAlbumGroup(java.lang.CharSequence value) {
    this.album_group = value;
  }

  /**
   * Gets the value of the 'album_type' field.
   * @return The value of the 'album_type' field.
   */
  public java.lang.CharSequence getAlbumType() {
    return album_type;
  }


  /**
   * Sets the value of the 'album_type' field.
   * @param value the value to set.
   */
  public void setAlbumType(java.lang.CharSequence value) {
    this.album_type = value;
  }

  /**
   * Gets the value of the 'release_date' field.
   * @return The value of the 'release_date' field.
   */
  public java.lang.CharSequence getReleaseDate() {
    return release_date;
  }


  /**
   * Sets the value of the 'release_date' field.
   * @param value the value to set.
   */
  public void setReleaseDate(java.lang.CharSequence value) {
    this.release_date = value;
  }

  /**
   * Gets the value of the 'album_popularity' field.
   * @return The value of the 'album_popularity' field.
   */
  public int getAlbumPopularity() {
    return album_popularity;
  }


  /**
   * Sets the value of the 'album_popularity' field.
   * @param value the value to set.
   */
  public void setAlbumPopularity(int value) {
    this.album_popularity = value;
  }

  /**
   * Gets the value of the 'artist_name' field.
   * @return The value of the 'artist_name' field.
   */
  public java.lang.CharSequence getArtistName() {
    return artist_name;
  }


  /**
   * Sets the value of the 'artist_name' field.
   * @param value the value to set.
   */
  public void setArtistName(java.lang.CharSequence value) {
    this.artist_name = value;
  }

  /**
   * Gets the value of the 'artist_popularity' field.
   * @return The value of the 'artist_popularity' field.
   */
  public int getArtistPopularity() {
    return artist_popularity;
  }


  /**
   * Sets the value of the 'artist_popularity' field.
   * @param value the value to set.
   */
  public void setArtistPopularity(int value) {
    this.artist_popularity = value;
  }

  /**
   * Gets the value of the 'followers' field.
   * @return The value of the 'followers' field.
   */
  public int getFollowers() {
    return followers;
  }


  /**
   * Sets the value of the 'followers' field.
   * @param value the value to set.
   */
  public void setFollowers(int value) {
    this.followers = value;
  }

  /**
   * Gets the value of the 'genre_id' field.
   * @return The value of the 'genre_id' field.
   */
  public java.lang.CharSequence getGenreId() {
    return genre_id;
  }


  /**
   * Sets the value of the 'genre_id' field.
   * @param value the value to set.
   */
  public void setGenreId(java.lang.CharSequence value) {
    this.genre_id = value;
  }

  /**
   * Creates a new spotify RecordBuilder.
   * @return A new spotify RecordBuilder
   */
  public static spotify.Builder newBuilder() {
    return new spotify.Builder();
  }

  /**
   * Creates a new spotify RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new spotify RecordBuilder
   */
  public static spotify.Builder newBuilder(spotify.Builder other) {
    if (other == null) {
      return new spotify.Builder();
    } else {
      return new spotify.Builder(other);
    }
  }

  /**
   * Creates a new spotify RecordBuilder by copying an existing spotify instance.
   * @param other The existing instance to copy.
   * @return A new spotify RecordBuilder
   */
  public static spotify.Builder newBuilder(spotify other) {
    if (other == null) {
      return new spotify.Builder();
    } else {
      return new spotify.Builder(other);
    }
  }

  /**
   * RecordBuilder for spotify instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<spotify>
    implements org.apache.avro.data.RecordBuilder<spotify> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence track_name;
    private int disc_number;
    private int duration;
    private int explicit;
    private java.lang.CharSequence audio_feature_id;
    private java.lang.CharSequence preview_url;
    private int track_number;
    private int popularity;
    private java.lang.Integer is_playable;
    private float acousticness;
    private float danceability;
    private float energy;
    private float instrumentalness;
    private int key;
    private float liveness;
    private float loudness;
    private int mode;
    private float speechiness;
    private float tempo;
    private int time_signature;
    private float valence;
    private java.lang.CharSequence album_name;
    private java.lang.CharSequence album_group;
    private java.lang.CharSequence album_type;
    private java.lang.CharSequence release_date;
    private int album_popularity;
    private java.lang.CharSequence artist_name;
    private int artist_popularity;
    private int followers;
    private java.lang.CharSequence genre_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(spotify.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.track_name)) {
        this.track_name = data().deepCopy(fields()[1].schema(), other.track_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.disc_number)) {
        this.disc_number = data().deepCopy(fields()[2].schema(), other.disc_number);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.duration)) {
        this.duration = data().deepCopy(fields()[3].schema(), other.duration);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.explicit)) {
        this.explicit = data().deepCopy(fields()[4].schema(), other.explicit);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.audio_feature_id)) {
        this.audio_feature_id = data().deepCopy(fields()[5].schema(), other.audio_feature_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.preview_url)) {
        this.preview_url = data().deepCopy(fields()[6].schema(), other.preview_url);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.track_number)) {
        this.track_number = data().deepCopy(fields()[7].schema(), other.track_number);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.popularity)) {
        this.popularity = data().deepCopy(fields()[8].schema(), other.popularity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.is_playable)) {
        this.is_playable = data().deepCopy(fields()[9].schema(), other.is_playable);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[10].schema(), other.acousticness);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.danceability)) {
        this.danceability = data().deepCopy(fields()[11].schema(), other.danceability);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.energy)) {
        this.energy = data().deepCopy(fields()[12].schema(), other.energy);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[13].schema(), other.instrumentalness);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.key)) {
        this.key = data().deepCopy(fields()[14].schema(), other.key);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.liveness)) {
        this.liveness = data().deepCopy(fields()[15].schema(), other.liveness);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.loudness)) {
        this.loudness = data().deepCopy(fields()[16].schema(), other.loudness);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.mode)) {
        this.mode = data().deepCopy(fields()[17].schema(), other.mode);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[18].schema(), other.speechiness);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.tempo)) {
        this.tempo = data().deepCopy(fields()[19].schema(), other.tempo);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[20].schema(), other.time_signature);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.valence)) {
        this.valence = data().deepCopy(fields()[21].schema(), other.valence);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.album_name)) {
        this.album_name = data().deepCopy(fields()[22].schema(), other.album_name);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.album_group)) {
        this.album_group = data().deepCopy(fields()[23].schema(), other.album_group);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.album_type)) {
        this.album_type = data().deepCopy(fields()[24].schema(), other.album_type);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.release_date)) {
        this.release_date = data().deepCopy(fields()[25].schema(), other.release_date);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.album_popularity)) {
        this.album_popularity = data().deepCopy(fields()[26].schema(), other.album_popularity);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[27].schema(), other.artist_name);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.artist_popularity)) {
        this.artist_popularity = data().deepCopy(fields()[28].schema(), other.artist_popularity);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.followers)) {
        this.followers = data().deepCopy(fields()[29].schema(), other.followers);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.genre_id)) {
        this.genre_id = data().deepCopy(fields()[30].schema(), other.genre_id);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
    }

    /**
     * Creates a Builder by copying an existing spotify instance
     * @param other The existing instance to copy.
     */
    private Builder(spotify other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.track_name)) {
        this.track_name = data().deepCopy(fields()[1].schema(), other.track_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.disc_number)) {
        this.disc_number = data().deepCopy(fields()[2].schema(), other.disc_number);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duration)) {
        this.duration = data().deepCopy(fields()[3].schema(), other.duration);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.explicit)) {
        this.explicit = data().deepCopy(fields()[4].schema(), other.explicit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.audio_feature_id)) {
        this.audio_feature_id = data().deepCopy(fields()[5].schema(), other.audio_feature_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.preview_url)) {
        this.preview_url = data().deepCopy(fields()[6].schema(), other.preview_url);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.track_number)) {
        this.track_number = data().deepCopy(fields()[7].schema(), other.track_number);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.popularity)) {
        this.popularity = data().deepCopy(fields()[8].schema(), other.popularity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.is_playable)) {
        this.is_playable = data().deepCopy(fields()[9].schema(), other.is_playable);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[10].schema(), other.acousticness);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.danceability)) {
        this.danceability = data().deepCopy(fields()[11].schema(), other.danceability);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.energy)) {
        this.energy = data().deepCopy(fields()[12].schema(), other.energy);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[13].schema(), other.instrumentalness);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.key)) {
        this.key = data().deepCopy(fields()[14].schema(), other.key);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.liveness)) {
        this.liveness = data().deepCopy(fields()[15].schema(), other.liveness);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.loudness)) {
        this.loudness = data().deepCopy(fields()[16].schema(), other.loudness);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.mode)) {
        this.mode = data().deepCopy(fields()[17].schema(), other.mode);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[18].schema(), other.speechiness);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.tempo)) {
        this.tempo = data().deepCopy(fields()[19].schema(), other.tempo);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[20].schema(), other.time_signature);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.valence)) {
        this.valence = data().deepCopy(fields()[21].schema(), other.valence);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.album_name)) {
        this.album_name = data().deepCopy(fields()[22].schema(), other.album_name);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.album_group)) {
        this.album_group = data().deepCopy(fields()[23].schema(), other.album_group);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.album_type)) {
        this.album_type = data().deepCopy(fields()[24].schema(), other.album_type);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.release_date)) {
        this.release_date = data().deepCopy(fields()[25].schema(), other.release_date);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.album_popularity)) {
        this.album_popularity = data().deepCopy(fields()[26].schema(), other.album_popularity);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[27].schema(), other.artist_name);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.artist_popularity)) {
        this.artist_popularity = data().deepCopy(fields()[28].schema(), other.artist_popularity);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.followers)) {
        this.followers = data().deepCopy(fields()[29].schema(), other.followers);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.genre_id)) {
        this.genre_id = data().deepCopy(fields()[30].schema(), other.genre_id);
        fieldSetFlags()[30] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public spotify.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public spotify.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getTrackName() {
      return track_name;
    }


    /**
      * Sets the value of the 'track_name' field.
      * @param value The value of 'track_name'.
      * @return This builder.
      */
    public spotify.Builder setTrackName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.track_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'track_name' field has been set.
      * @return True if the 'track_name' field has been set, false otherwise.
      */
    public boolean hasTrackName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'track_name' field.
      * @return This builder.
      */
    public spotify.Builder clearTrackName() {
      track_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'disc_number' field.
      * @return The value.
      */
    public int getDiscNumber() {
      return disc_number;
    }


    /**
      * Sets the value of the 'disc_number' field.
      * @param value The value of 'disc_number'.
      * @return This builder.
      */
    public spotify.Builder setDiscNumber(int value) {
      validate(fields()[2], value);
      this.disc_number = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'disc_number' field has been set.
      * @return True if the 'disc_number' field has been set, false otherwise.
      */
    public boolean hasDiscNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'disc_number' field.
      * @return This builder.
      */
    public spotify.Builder clearDiscNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public int getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public spotify.Builder setDuration(int value) {
      validate(fields()[3], value);
      this.duration = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public spotify.Builder clearDuration() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'explicit' field.
      * @return The value.
      */
    public int getExplicit() {
      return explicit;
    }


    /**
      * Sets the value of the 'explicit' field.
      * @param value The value of 'explicit'.
      * @return This builder.
      */
    public spotify.Builder setExplicit(int value) {
      validate(fields()[4], value);
      this.explicit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'explicit' field has been set.
      * @return True if the 'explicit' field has been set, false otherwise.
      */
    public boolean hasExplicit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'explicit' field.
      * @return This builder.
      */
    public spotify.Builder clearExplicit() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'audio_feature_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getAudioFeatureId() {
      return audio_feature_id;
    }


    /**
      * Sets the value of the 'audio_feature_id' field.
      * @param value The value of 'audio_feature_id'.
      * @return This builder.
      */
    public spotify.Builder setAudioFeatureId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.audio_feature_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'audio_feature_id' field has been set.
      * @return True if the 'audio_feature_id' field has been set, false otherwise.
      */
    public boolean hasAudioFeatureId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'audio_feature_id' field.
      * @return This builder.
      */
    public spotify.Builder clearAudioFeatureId() {
      audio_feature_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'preview_url' field.
      * @return The value.
      */
    public java.lang.CharSequence getPreviewUrl() {
      return preview_url;
    }


    /**
      * Sets the value of the 'preview_url' field.
      * @param value The value of 'preview_url'.
      * @return This builder.
      */
    public spotify.Builder setPreviewUrl(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.preview_url = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'preview_url' field has been set.
      * @return True if the 'preview_url' field has been set, false otherwise.
      */
    public boolean hasPreviewUrl() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'preview_url' field.
      * @return This builder.
      */
    public spotify.Builder clearPreviewUrl() {
      preview_url = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_number' field.
      * @return The value.
      */
    public int getTrackNumber() {
      return track_number;
    }


    /**
      * Sets the value of the 'track_number' field.
      * @param value The value of 'track_number'.
      * @return This builder.
      */
    public spotify.Builder setTrackNumber(int value) {
      validate(fields()[7], value);
      this.track_number = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'track_number' field has been set.
      * @return True if the 'track_number' field has been set, false otherwise.
      */
    public boolean hasTrackNumber() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'track_number' field.
      * @return This builder.
      */
    public spotify.Builder clearTrackNumber() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'popularity' field.
      * @return The value.
      */
    public int getPopularity() {
      return popularity;
    }


    /**
      * Sets the value of the 'popularity' field.
      * @param value The value of 'popularity'.
      * @return This builder.
      */
    public spotify.Builder setPopularity(int value) {
      validate(fields()[8], value);
      this.popularity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'popularity' field has been set.
      * @return True if the 'popularity' field has been set, false otherwise.
      */
    public boolean hasPopularity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'popularity' field.
      * @return This builder.
      */
    public spotify.Builder clearPopularity() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_playable' field.
      * @return The value.
      */
    public java.lang.Integer getIsPlayable() {
      return is_playable;
    }


    /**
      * Sets the value of the 'is_playable' field.
      * @param value The value of 'is_playable'.
      * @return This builder.
      */
    public spotify.Builder setIsPlayable(java.lang.Integer value) {
      validate(fields()[9], value);
      this.is_playable = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'is_playable' field has been set.
      * @return True if the 'is_playable' field has been set, false otherwise.
      */
    public boolean hasIsPlayable() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'is_playable' field.
      * @return This builder.
      */
    public spotify.Builder clearIsPlayable() {
      is_playable = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'acousticness' field.
      * @return The value.
      */
    public float getAcousticness() {
      return acousticness;
    }


    /**
      * Sets the value of the 'acousticness' field.
      * @param value The value of 'acousticness'.
      * @return This builder.
      */
    public spotify.Builder setAcousticness(float value) {
      validate(fields()[10], value);
      this.acousticness = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'acousticness' field has been set.
      * @return True if the 'acousticness' field has been set, false otherwise.
      */
    public boolean hasAcousticness() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'acousticness' field.
      * @return This builder.
      */
    public spotify.Builder clearAcousticness() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'danceability' field.
      * @return The value.
      */
    public float getDanceability() {
      return danceability;
    }


    /**
      * Sets the value of the 'danceability' field.
      * @param value The value of 'danceability'.
      * @return This builder.
      */
    public spotify.Builder setDanceability(float value) {
      validate(fields()[11], value);
      this.danceability = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'danceability' field has been set.
      * @return True if the 'danceability' field has been set, false otherwise.
      */
    public boolean hasDanceability() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'danceability' field.
      * @return This builder.
      */
    public spotify.Builder clearDanceability() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * @return The value.
      */
    public float getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public spotify.Builder setEnergy(float value) {
      validate(fields()[12], value);
      this.energy = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'energy' field.
      * @return This builder.
      */
    public spotify.Builder clearEnergy() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentalness' field.
      * @return The value.
      */
    public float getInstrumentalness() {
      return instrumentalness;
    }


    /**
      * Sets the value of the 'instrumentalness' field.
      * @param value The value of 'instrumentalness'.
      * @return This builder.
      */
    public spotify.Builder setInstrumentalness(float value) {
      validate(fields()[13], value);
      this.instrumentalness = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentalness' field has been set.
      * @return True if the 'instrumentalness' field has been set, false otherwise.
      */
    public boolean hasInstrumentalness() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'instrumentalness' field.
      * @return This builder.
      */
    public spotify.Builder clearInstrumentalness() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public int getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public spotify.Builder setKey(int value) {
      validate(fields()[14], value);
      this.key = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public spotify.Builder clearKey() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveness' field.
      * @return The value.
      */
    public float getLiveness() {
      return liveness;
    }


    /**
      * Sets the value of the 'liveness' field.
      * @param value The value of 'liveness'.
      * @return This builder.
      */
    public spotify.Builder setLiveness(float value) {
      validate(fields()[15], value);
      this.liveness = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'liveness' field has been set.
      * @return True if the 'liveness' field has been set, false otherwise.
      */
    public boolean hasLiveness() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'liveness' field.
      * @return This builder.
      */
    public spotify.Builder clearLiveness() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'loudness' field.
      * @return The value.
      */
    public float getLoudness() {
      return loudness;
    }


    /**
      * Sets the value of the 'loudness' field.
      * @param value The value of 'loudness'.
      * @return This builder.
      */
    public spotify.Builder setLoudness(float value) {
      validate(fields()[16], value);
      this.loudness = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'loudness' field has been set.
      * @return True if the 'loudness' field has been set, false otherwise.
      */
    public boolean hasLoudness() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'loudness' field.
      * @return This builder.
      */
    public spotify.Builder clearLoudness() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode' field.
      * @return The value.
      */
    public int getMode() {
      return mode;
    }


    /**
      * Sets the value of the 'mode' field.
      * @param value The value of 'mode'.
      * @return This builder.
      */
    public spotify.Builder setMode(int value) {
      validate(fields()[17], value);
      this.mode = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'mode' field has been set.
      * @return True if the 'mode' field has been set, false otherwise.
      */
    public boolean hasMode() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'mode' field.
      * @return This builder.
      */
    public spotify.Builder clearMode() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'speechiness' field.
      * @return The value.
      */
    public float getSpeechiness() {
      return speechiness;
    }


    /**
      * Sets the value of the 'speechiness' field.
      * @param value The value of 'speechiness'.
      * @return This builder.
      */
    public spotify.Builder setSpeechiness(float value) {
      validate(fields()[18], value);
      this.speechiness = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'speechiness' field has been set.
      * @return True if the 'speechiness' field has been set, false otherwise.
      */
    public boolean hasSpeechiness() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'speechiness' field.
      * @return This builder.
      */
    public spotify.Builder clearSpeechiness() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempo' field.
      * @return The value.
      */
    public float getTempo() {
      return tempo;
    }


    /**
      * Sets the value of the 'tempo' field.
      * @param value The value of 'tempo'.
      * @return This builder.
      */
    public spotify.Builder setTempo(float value) {
      validate(fields()[19], value);
      this.tempo = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'tempo' field has been set.
      * @return True if the 'tempo' field has been set, false otherwise.
      */
    public boolean hasTempo() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'tempo' field.
      * @return This builder.
      */
    public spotify.Builder clearTempo() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_signature' field.
      * @return The value.
      */
    public int getTimeSignature() {
      return time_signature;
    }


    /**
      * Sets the value of the 'time_signature' field.
      * @param value The value of 'time_signature'.
      * @return This builder.
      */
    public spotify.Builder setTimeSignature(int value) {
      validate(fields()[20], value);
      this.time_signature = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'time_signature' field has been set.
      * @return True if the 'time_signature' field has been set, false otherwise.
      */
    public boolean hasTimeSignature() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'time_signature' field.
      * @return This builder.
      */
    public spotify.Builder clearTimeSignature() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'valence' field.
      * @return The value.
      */
    public float getValence() {
      return valence;
    }


    /**
      * Sets the value of the 'valence' field.
      * @param value The value of 'valence'.
      * @return This builder.
      */
    public spotify.Builder setValence(float value) {
      validate(fields()[21], value);
      this.valence = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'valence' field has been set.
      * @return True if the 'valence' field has been set, false otherwise.
      */
    public boolean hasValence() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'valence' field.
      * @return This builder.
      */
    public spotify.Builder clearValence() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'album_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlbumName() {
      return album_name;
    }


    /**
      * Sets the value of the 'album_name' field.
      * @param value The value of 'album_name'.
      * @return This builder.
      */
    public spotify.Builder setAlbumName(java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.album_name = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'album_name' field has been set.
      * @return True if the 'album_name' field has been set, false otherwise.
      */
    public boolean hasAlbumName() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'album_name' field.
      * @return This builder.
      */
    public spotify.Builder clearAlbumName() {
      album_name = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'album_group' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlbumGroup() {
      return album_group;
    }


    /**
      * Sets the value of the 'album_group' field.
      * @param value The value of 'album_group'.
      * @return This builder.
      */
    public spotify.Builder setAlbumGroup(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.album_group = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'album_group' field has been set.
      * @return True if the 'album_group' field has been set, false otherwise.
      */
    public boolean hasAlbumGroup() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'album_group' field.
      * @return This builder.
      */
    public spotify.Builder clearAlbumGroup() {
      album_group = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'album_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getAlbumType() {
      return album_type;
    }


    /**
      * Sets the value of the 'album_type' field.
      * @param value The value of 'album_type'.
      * @return This builder.
      */
    public spotify.Builder setAlbumType(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.album_type = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'album_type' field has been set.
      * @return True if the 'album_type' field has been set, false otherwise.
      */
    public boolean hasAlbumType() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'album_type' field.
      * @return This builder.
      */
    public spotify.Builder clearAlbumType() {
      album_type = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'release_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getReleaseDate() {
      return release_date;
    }


    /**
      * Sets the value of the 'release_date' field.
      * @param value The value of 'release_date'.
      * @return This builder.
      */
    public spotify.Builder setReleaseDate(java.lang.CharSequence value) {
      validate(fields()[25], value);
      this.release_date = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'release_date' field has been set.
      * @return True if the 'release_date' field has been set, false otherwise.
      */
    public boolean hasReleaseDate() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'release_date' field.
      * @return This builder.
      */
    public spotify.Builder clearReleaseDate() {
      release_date = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'album_popularity' field.
      * @return The value.
      */
    public int getAlbumPopularity() {
      return album_popularity;
    }


    /**
      * Sets the value of the 'album_popularity' field.
      * @param value The value of 'album_popularity'.
      * @return This builder.
      */
    public spotify.Builder setAlbumPopularity(int value) {
      validate(fields()[26], value);
      this.album_popularity = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'album_popularity' field has been set.
      * @return True if the 'album_popularity' field has been set, false otherwise.
      */
    public boolean hasAlbumPopularity() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'album_popularity' field.
      * @return This builder.
      */
    public spotify.Builder clearAlbumPopularity() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtistName() {
      return artist_name;
    }


    /**
      * Sets the value of the 'artist_name' field.
      * @param value The value of 'artist_name'.
      * @return This builder.
      */
    public spotify.Builder setArtistName(java.lang.CharSequence value) {
      validate(fields()[27], value);
      this.artist_name = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_name' field has been set.
      * @return True if the 'artist_name' field has been set, false otherwise.
      */
    public boolean hasArtistName() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'artist_name' field.
      * @return This builder.
      */
    public spotify.Builder clearArtistName() {
      artist_name = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_popularity' field.
      * @return The value.
      */
    public int getArtistPopularity() {
      return artist_popularity;
    }


    /**
      * Sets the value of the 'artist_popularity' field.
      * @param value The value of 'artist_popularity'.
      * @return This builder.
      */
    public spotify.Builder setArtistPopularity(int value) {
      validate(fields()[28], value);
      this.artist_popularity = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_popularity' field has been set.
      * @return True if the 'artist_popularity' field has been set, false otherwise.
      */
    public boolean hasArtistPopularity() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'artist_popularity' field.
      * @return This builder.
      */
    public spotify.Builder clearArtistPopularity() {
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'followers' field.
      * @return The value.
      */
    public int getFollowers() {
      return followers;
    }


    /**
      * Sets the value of the 'followers' field.
      * @param value The value of 'followers'.
      * @return This builder.
      */
    public spotify.Builder setFollowers(int value) {
      validate(fields()[29], value);
      this.followers = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'followers' field has been set.
      * @return True if the 'followers' field has been set, false otherwise.
      */
    public boolean hasFollowers() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'followers' field.
      * @return This builder.
      */
    public spotify.Builder clearFollowers() {
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'genre_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getGenreId() {
      return genre_id;
    }


    /**
      * Sets the value of the 'genre_id' field.
      * @param value The value of 'genre_id'.
      * @return This builder.
      */
    public spotify.Builder setGenreId(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.genre_id = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'genre_id' field has been set.
      * @return True if the 'genre_id' field has been set, false otherwise.
      */
    public boolean hasGenreId() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'genre_id' field.
      * @return This builder.
      */
    public spotify.Builder clearGenreId() {
      genre_id = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public spotify build() {
      try {
        spotify record = new spotify();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.track_name = fieldSetFlags()[1] ? this.track_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.disc_number = fieldSetFlags()[2] ? this.disc_number : (java.lang.Integer) defaultValue(fields()[2]);
        record.duration = fieldSetFlags()[3] ? this.duration : (java.lang.Integer) defaultValue(fields()[3]);
        record.explicit = fieldSetFlags()[4] ? this.explicit : (java.lang.Integer) defaultValue(fields()[4]);
        record.audio_feature_id = fieldSetFlags()[5] ? this.audio_feature_id : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.preview_url = fieldSetFlags()[6] ? this.preview_url : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.track_number = fieldSetFlags()[7] ? this.track_number : (java.lang.Integer) defaultValue(fields()[7]);
        record.popularity = fieldSetFlags()[8] ? this.popularity : (java.lang.Integer) defaultValue(fields()[8]);
        record.is_playable = fieldSetFlags()[9] ? this.is_playable : (java.lang.Integer) defaultValue(fields()[9]);
        record.acousticness = fieldSetFlags()[10] ? this.acousticness : (java.lang.Float) defaultValue(fields()[10]);
        record.danceability = fieldSetFlags()[11] ? this.danceability : (java.lang.Float) defaultValue(fields()[11]);
        record.energy = fieldSetFlags()[12] ? this.energy : (java.lang.Float) defaultValue(fields()[12]);
        record.instrumentalness = fieldSetFlags()[13] ? this.instrumentalness : (java.lang.Float) defaultValue(fields()[13]);
        record.key = fieldSetFlags()[14] ? this.key : (java.lang.Integer) defaultValue(fields()[14]);
        record.liveness = fieldSetFlags()[15] ? this.liveness : (java.lang.Float) defaultValue(fields()[15]);
        record.loudness = fieldSetFlags()[16] ? this.loudness : (java.lang.Float) defaultValue(fields()[16]);
        record.mode = fieldSetFlags()[17] ? this.mode : (java.lang.Integer) defaultValue(fields()[17]);
        record.speechiness = fieldSetFlags()[18] ? this.speechiness : (java.lang.Float) defaultValue(fields()[18]);
        record.tempo = fieldSetFlags()[19] ? this.tempo : (java.lang.Float) defaultValue(fields()[19]);
        record.time_signature = fieldSetFlags()[20] ? this.time_signature : (java.lang.Integer) defaultValue(fields()[20]);
        record.valence = fieldSetFlags()[21] ? this.valence : (java.lang.Float) defaultValue(fields()[21]);
        record.album_name = fieldSetFlags()[22] ? this.album_name : (java.lang.CharSequence) defaultValue(fields()[22]);
        record.album_group = fieldSetFlags()[23] ? this.album_group : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.album_type = fieldSetFlags()[24] ? this.album_type : (java.lang.CharSequence) defaultValue(fields()[24]);
        record.release_date = fieldSetFlags()[25] ? this.release_date : (java.lang.CharSequence) defaultValue(fields()[25]);
        record.album_popularity = fieldSetFlags()[26] ? this.album_popularity : (java.lang.Integer) defaultValue(fields()[26]);
        record.artist_name = fieldSetFlags()[27] ? this.artist_name : (java.lang.CharSequence) defaultValue(fields()[27]);
        record.artist_popularity = fieldSetFlags()[28] ? this.artist_popularity : (java.lang.Integer) defaultValue(fields()[28]);
        record.followers = fieldSetFlags()[29] ? this.followers : (java.lang.Integer) defaultValue(fields()[29]);
        record.genre_id = fieldSetFlags()[30] ? this.genre_id : (java.lang.CharSequence) defaultValue(fields()[30]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<spotify>
    WRITER$ = (org.apache.avro.io.DatumWriter<spotify>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<spotify>
    READER$ = (org.apache.avro.io.DatumReader<spotify>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.track_name);

    out.writeInt(this.disc_number);

    out.writeInt(this.duration);

    out.writeInt(this.explicit);

    out.writeString(this.audio_feature_id);

    out.writeString(this.preview_url);

    out.writeInt(this.track_number);

    out.writeInt(this.popularity);

    if (this.is_playable == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.is_playable);
    }

    out.writeFloat(this.acousticness);

    out.writeFloat(this.danceability);

    out.writeFloat(this.energy);

    out.writeFloat(this.instrumentalness);

    out.writeInt(this.key);

    out.writeFloat(this.liveness);

    out.writeFloat(this.loudness);

    out.writeInt(this.mode);

    out.writeFloat(this.speechiness);

    out.writeFloat(this.tempo);

    out.writeInt(this.time_signature);

    out.writeFloat(this.valence);

    out.writeString(this.album_name);

    out.writeString(this.album_group);

    out.writeString(this.album_type);

    out.writeString(this.release_date);

    out.writeInt(this.album_popularity);

    out.writeString(this.artist_name);

    out.writeInt(this.artist_popularity);

    out.writeInt(this.followers);

    out.writeString(this.genre_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.track_name = in.readString(this.track_name instanceof Utf8 ? (Utf8)this.track_name : null);

      this.disc_number = in.readInt();

      this.duration = in.readInt();

      this.explicit = in.readInt();

      this.audio_feature_id = in.readString(this.audio_feature_id instanceof Utf8 ? (Utf8)this.audio_feature_id : null);

      this.preview_url = in.readString(this.preview_url instanceof Utf8 ? (Utf8)this.preview_url : null);

      this.track_number = in.readInt();

      this.popularity = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.is_playable = null;
      } else {
        this.is_playable = in.readInt();
      }

      this.acousticness = in.readFloat();

      this.danceability = in.readFloat();

      this.energy = in.readFloat();

      this.instrumentalness = in.readFloat();

      this.key = in.readInt();

      this.liveness = in.readFloat();

      this.loudness = in.readFloat();

      this.mode = in.readInt();

      this.speechiness = in.readFloat();

      this.tempo = in.readFloat();

      this.time_signature = in.readInt();

      this.valence = in.readFloat();

      this.album_name = in.readString(this.album_name instanceof Utf8 ? (Utf8)this.album_name : null);

      this.album_group = in.readString(this.album_group instanceof Utf8 ? (Utf8)this.album_group : null);

      this.album_type = in.readString(this.album_type instanceof Utf8 ? (Utf8)this.album_type : null);

      this.release_date = in.readString(this.release_date instanceof Utf8 ? (Utf8)this.release_date : null);

      this.album_popularity = in.readInt();

      this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);

      this.artist_popularity = in.readInt();

      this.followers = in.readInt();

      this.genre_id = in.readString(this.genre_id instanceof Utf8 ? (Utf8)this.genre_id : null);

    } else {
      for (int i = 0; i < 31; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.track_name = in.readString(this.track_name instanceof Utf8 ? (Utf8)this.track_name : null);
          break;

        case 2:
          this.disc_number = in.readInt();
          break;

        case 3:
          this.duration = in.readInt();
          break;

        case 4:
          this.explicit = in.readInt();
          break;

        case 5:
          this.audio_feature_id = in.readString(this.audio_feature_id instanceof Utf8 ? (Utf8)this.audio_feature_id : null);
          break;

        case 6:
          this.preview_url = in.readString(this.preview_url instanceof Utf8 ? (Utf8)this.preview_url : null);
          break;

        case 7:
          this.track_number = in.readInt();
          break;

        case 8:
          this.popularity = in.readInt();
          break;

        case 9:
          if (in.readIndex() != 0) {
            in.readNull();
            this.is_playable = null;
          } else {
            this.is_playable = in.readInt();
          }
          break;

        case 10:
          this.acousticness = in.readFloat();
          break;

        case 11:
          this.danceability = in.readFloat();
          break;

        case 12:
          this.energy = in.readFloat();
          break;

        case 13:
          this.instrumentalness = in.readFloat();
          break;

        case 14:
          this.key = in.readInt();
          break;

        case 15:
          this.liveness = in.readFloat();
          break;

        case 16:
          this.loudness = in.readFloat();
          break;

        case 17:
          this.mode = in.readInt();
          break;

        case 18:
          this.speechiness = in.readFloat();
          break;

        case 19:
          this.tempo = in.readFloat();
          break;

        case 20:
          this.time_signature = in.readInt();
          break;

        case 21:
          this.valence = in.readFloat();
          break;

        case 22:
          this.album_name = in.readString(this.album_name instanceof Utf8 ? (Utf8)this.album_name : null);
          break;

        case 23:
          this.album_group = in.readString(this.album_group instanceof Utf8 ? (Utf8)this.album_group : null);
          break;

        case 24:
          this.album_type = in.readString(this.album_type instanceof Utf8 ? (Utf8)this.album_type : null);
          break;

        case 25:
          this.release_date = in.readString(this.release_date instanceof Utf8 ? (Utf8)this.release_date : null);
          break;

        case 26:
          this.album_popularity = in.readInt();
          break;

        case 27:
          this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);
          break;

        case 28:
          this.artist_popularity = in.readInt();
          break;

        case 29:
          this.followers = in.readInt();
          break;

        case 30:
          this.genre_id = in.readString(this.genre_id instanceof Utf8 ? (Utf8)this.genre_id : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










